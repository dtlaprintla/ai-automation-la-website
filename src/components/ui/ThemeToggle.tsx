'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Sun, Moon, Palette } from 'lucide-react';\nimport { themeManager, type Theme, themes } from '@/utils/themeToggle';\n\ninterface ThemeToggleProps {\n  variant?: 'button' | 'dropdown' | 'toggle';\n  showLabels?: boolean;\n  className?: string;\n}\n\nexport default function ThemeToggle({ \n  variant = 'button', \n  showLabels = true,\n  className = ''\n}: ThemeToggleProps) {\n  const [currentTheme, setCurrentTheme] = useState<Theme>('default');\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    setCurrentTheme(themeManager.getCurrentTheme());\n    \n    // Listen for theme changes\n    const handleThemeChange = (e: CustomEvent) => {\n      setCurrentTheme(e.detail.theme);\n    };\n    \n    window.addEventListener('themeChanged', handleThemeChange as EventListener);\n    return () => window.removeEventListener('themeChanged', handleThemeChange as EventListener);\n  }, []);\n\n  const handleThemeSelect = (theme: Theme) => {\n    themeManager.applyTheme(theme);\n    setIsOpen(false);\n  };\n\n  const getThemeIcon = (theme: Theme) => {\n    switch (theme) {\n      case 'light': return <Sun className=\"w-4 h-4\" />;\n      case 'n8n': return <Moon className=\"w-4 h-4\" />;\n      default: return <Palette className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (variant === 'toggle') {\n    return (\n      <button\n        onClick={() => themeManager.toggleTheme()}\n        className={`\n          flex items-center gap-2 px-4 py-2 rounded-lg \n          bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700\n          transition-all duration-200\n          ${className}\n        `}\n      >\n        {getThemeIcon(currentTheme)}\n        {showLabels && (\n          <span className=\"text-sm font-medium\">\n            {themes[currentTheme].name}\n          </span>\n        )}\n      </button>\n    );\n  }\n\n  if (variant === 'dropdown') {\n    return (\n      <div className={`relative ${className}`}>\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"\n            flex items-center gap-2 px-4 py-2 rounded-lg \n            bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700\n            transition-all duration-200\n          \"\n        >\n          {getThemeIcon(currentTheme)}\n          {showLabels && (\n            <span className=\"text-sm font-medium\">\n              {themes[currentTheme].name}\n            </span>\n          )}\n        </button>\n        \n        {isOpen && (\n          <div className=\"\n            absolute top-full left-0 mt-2 w-48\n            bg-white dark:bg-gray-800 \n            border border-gray-200 dark:border-gray-700\n            rounded-lg shadow-lg z-50\n          \">\n            {Object.entries(themes).map(([themeKey, themeConfig]) => {\n              const theme = themeKey as Theme;\n              return (\n                <button\n                  key={theme}\n                  onClick={() => handleThemeSelect(theme)}\n                  className={`\n                    w-full flex items-center gap-3 px-4 py-3 text-left\n                    hover:bg-gray-50 dark:hover:bg-gray-700\n                    transition-colors duration-200\n                    ${currentTheme === theme ? 'bg-blue-50 dark:bg-blue-900/20' : ''}\n                    first:rounded-t-lg last:rounded-b-lg\n                  `}\n                >\n                  {getThemeIcon(theme)}\n                  <div>\n                    <div className=\"font-medium text-sm\">{themeConfig.name}</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {themeConfig.description}\n                    </div>\n                  </div>\n                  {currentTheme === theme && (\n                    <div className=\"ml-auto w-2 h-2 bg-blue-500 rounded-full\"></div>\n                  )}\n                </button>\n              );\n            })}\n          </div>\n        )}\n        \n        {/* Backdrop */}\n        {isOpen && (\n          <div \n            className=\"fixed inset-0 z-40\"\n            onClick={() => setIsOpen(false)}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // Default button variant\n  return (\n    <div className={`flex items-center gap-2 ${className}`}>\n      {Object.entries(themes).map(([themeKey, themeConfig]) => {\n        const theme = themeKey as Theme;\n        const isActive = currentTheme === theme;\n        \n        return (\n          <button\n            key={theme}\n            onClick={() => handleThemeSelect(theme)}\n            className={`\n              flex items-center gap-2 px-3 py-2 rounded-lg transition-all duration-200\n              ${isActive \n                ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300' \n                : 'bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700'\n              }\n            `}\n            title={themeConfig.description}\n          >\n            {getThemeIcon(theme)}\n            {showLabels && (\n              <span className=\"text-sm font-medium hidden sm:inline\">\n                {themeConfig.name}\n              </span>\n            )}\n          </button>\n        );\n      })}\n    </div>\n  );\n}"